# (C) 2018 University of Bristol. See License.txt
import sys
import time
from Compiler.types import sint, regint, Array, MemValue
from Compiler.instructions import listen, acceptclientconnection
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else
from Compiler import library
NUM_COLS = 10

# Shift 20 places to get from float representation to int representation
FP_FACTOR = 20
sfix.set_precision(FP_FACTOR, 40)
cfix.set_precision(FP_FACTOR, 40)
MAX_NUM_CLIENTS = 4
PORTNUM = 14000
# Hyperparameters, l is the lambda used in Lasso
rho = 0.01
l = 0.008
# Number of iterations for admm
admm_iter = 10




def soft_threshold(th, v):
	@if_(v > th)
	def f():
		return v - th
	@if_(v < sfix(-1) * th)
	def g():
		return v + th

	return sfix(0)
	
def soft_threshold_vec(th, vec):
    vec_new = sfixArray(len(vec))
    @for_range(len(vec))
    def loop_body(i):
    	vec_new[i] = sfix(0)

    @for_range(len(vec))
    def loop_body(i):
    	v = vec[i]
    	neg_th = -1 * th
    	@if_((v > th).reveal())
    	def f():
    		vec_new[i] = vec[i] - th

    	@if_((v < neg_th).reveal())
    	def g():
    		vec_new[i] = vec[i] + th


    return vec_new

def admm_coordinate(w_list, u_list, z, rho, l):
	d = NUM_COLS
	nparties = MAX_NUM_CLIENTS
	w_avg = sfixArray(d)
	u_avg = sfixArray(d)
	@for_range(d)
	def loop_body(i):
		w_avg[i] = sfix(0)
		u_avg[i] = sfix(0)
	# Assume u_list and w_list are same length.
	@for_range(nparties)
	def loop_body(i):
		w = get_ith_matrix(w_list, i, NUM_COLS)
		u = get_ith_matrix(u_list, i, NUM_COLS)
		new_w_avg = add_matrices(w_avg, w)
		new_u_avg = add_matrices(u_avg, u)
		copy_ith_matrix(w_avg, new_w_avg, 0, len(w))
		copy_ith_matrix(u_avg, new_u_avg, 0, len(w))

	@for_range(len(w_avg))
	def loop_body(i):
		w_avg[i] = w_avg[i] / sfix(nparties)
		u_avg[i] = u_avg[i] / sfix(nparties)


	
	# threshold
	th = sfix(l) / sfix(rho * nparties)
	u_plus_w = add_matrices(w_avg, u_avg)
	
	z_new = soft_threshold_vec(th, u_plus_w)
	u_list_new = sfixArray(len(u_list))
	neg_z = sfixArray(len(z_new))
	@for_range(len(z_new))
	def loop_body(j):
		neg_z[j] = - 1 * z_new[j]
	@for_range(nparties)
	def loop_body(i):
		u_i = get_ith_matrix(u_list, i, NUM_COLS)
		w_i = get_ith_matrix(w_list, i, NUM_COLS)
		intermediate_vec = add_matrices(u_i, w_i)
		sum_vec = add_matrices(intermediate_vec, neg_z)
		copy_ith_matrix(u_list_new, sum_vec, i, NUM_COLS)
	return (u_list_new, z_new)


# Local computation of weight vector.
def admm_local(XXinv, Xy, u, z, rho, l):
	z_u = sfixArray(len(z))
	@for_range(len(z))
	def loop_body(i):
		z_u[i] = rho * (z[i] - u[i])
	second_term = add_matrices(Xy, z_u)
	w = multiply_matrices(XXinv, second_term, NUM_COLS, NUM_COLS, NUM_COLS, 1)
	return w

def get_new_w(XXinv_cache, Xy_cache, u_list, z, rho, l):
	nparties = MAX_NUM_CLIENTS
	w_list = sfixArray(nparties * NUM_COLS)
	@for_range(nparties)
	def loop_body(i):
		XXinv = get_ith_matrix(XXinv_cache, i, NUM_COLS*NUM_COLS)
		Xy = get_ith_matrix(Xy_cache, i, NUM_COLS)
		u = get_ith_matrix(u_list, i, NUM_COLS)
		w_new = admm_local(XXinv, Xy, u, z, rho, l)
		copy_ith_matrix(w_list, w_new, i, NUM_COLS)

	return w_list

def admm(XXinv_cache, Xy_cache, admm_iter, rho, l):
	nparties = MAX_NUM_CLIENTS
	# Init all the lists, set everything to 0
	w_list = sfixArray(nparties * NUM_COLS)
	u_list = sfixArray(nparties * NUM_COLS)
	z = sfixArray(NUM_COLS)
	@for_range(len(w_list))
	def loop_body(i):
		w_list[i] = sfix(0)
		u_list[i] = sfix(0)
	@for_range(len(z))
	def loop_body(i):
		z[i] = sfix(0)

	@for_range(admm_iter)
	def loop_body(i):
		new_w_list = get_new_w(XXinv_cache, Xy_cache, u_list, z, rho, l)	
		new_u_list, new_z = admm_coordinate(new_w_list, u_list, z, rho, l)

		@for_range(len(u_list))
		def loop_body(j):
			w_list[j] = new_w_list[j]
			u_list[j] = new_u_list[j]
		
	return z


def get_ith_matrix(lst, index, step_size):

	result = sfixArray(step_size)
	@for_range(step_size)
	def loop_body(i):
		result[i] = lst[index * step_size + i]
	return result

def copy_ith_matrix(lst, lst_to_copy, index, step_size):
	@for_range(len(lst_to_copy))
	def loop_body(i):
		lst[index * step_size + i] = lst_to_copy[i]


def add_matrices(left_matrix, right_matrix):
	result_matrix = sfixArray(len(left_matrix))
	@for_range(len(result_matrix))
	def range_body(i):
		result_matrix[i] = sfix(0)
	@for_range(len(result_matrix))
	def range_body(i):
		result_matrix[i] = left_matrix[i] + right_matrix[i]
	return result_matrix


def multiply_matrices(left_matrix, right_matrix, num_rows_a, num_cols_a, num_rows_b, num_cols_b):
	result_matrix = sfixArray(num_rows_a * num_cols_b)
	@for_range(len(result_matrix))
	def range_body(i):
		result_matrix[i] = sfix(0)
	@for_range(num_rows_a)
	def range_body(i):
		@for_range(num_cols_b)
		def range_body(j):
	     		@for_range(num_rows_b)
     			def range_body(k):
     				result_matrix[i * num_cols_b + j] += left_matrix[i * num_cols_a + k] * right_matrix[k * num_cols_b + j]
	return result_matrix
  


def send_weights_to_clients(sockets, number_clients, weights):
	rnd_from_triple = sint.get_random_triple()[0]
	@for_range(NUM_COLS)
	def loop_body(i):
		@for_range(number_clients)
		def loop_body(j): 
			auth_result = weights[i] * rnd_from_triple
			sint.write_shares_to_socket(sockets[j], [weights[i], rnd_from_triple, auth_result])




# Params
def accept_client_input():
	client_socket_id = regint()
	acceptclientconnection(client_socket_id, PORTNUM)
	print_ln("Received Client Input!")
	client_inputs = sint.receive_from_client(1 + NUM_COLS * NUM_COLS + NUM_COLS, client_socket_id)
	finish = client_inputs[0]
	XX_inv = sfixArray(NUM_COLS * NUM_COLS)
	print_ln("%s", "Getting input")
	for i in range(1, NUM_COLS * NUM_COLS + 1):
		x = sfix(client_inputs[i])
		XX_inv[i - 1] = x
	Xy = sfixArray(NUM_COLS)
	for i in range(NUM_COLS):
		x = sfix(client_inputs[i + 1 + NUM_COLS * NUM_COLS])
		Xy[i] = x

	return XX_inv, Xy, client_socket_id, finish

def main():
	listen(PORTNUM)
	print_ln('Listening for client connections on base port %s', PORTNUM)
	XXinv_cache = sfixArray(MAX_NUM_CLIENTS * NUM_COLS * NUM_COLS)
	Xy_cache = sfixArray(MAX_NUM_CLIENTS * NUM_COLS)
	client_sockets = Array(MAX_NUM_CLIENTS, regint)
	number_clients = MemValue(regint(0))
	XXinv_index = MemValue(regint(0))
	Xy_index = MemValue(regint(0))
	@for_range(MAX_NUM_CLIENTS)
	def loop_body(i):
		XX_inv, Xy, client_sockets[i], finish = accept_client_input()
		@for_range(len(XX_inv))
		def loop_body(k):
			XXinv_cache[XXinv_index] = XX_inv[k]
			XXinv_index.write(XXinv_index + 1)
		@for_range(len(Xy))
		def loop_body(j):
			Xy_cache[Xy_index] = Xy[j]
			Xy_index.write(Xy_index + 1)

	number_clients.write(number_clients+1)
	start = time.time()
	weights = admm(XXinv_cache, Xy_cache, admm_iter, rho, l)
	new_weights = Array(len(weights), sint)
	print_ln("%s", "Printing weights......")
	@for_range(len(weights))
	def loop_body(i):
		new_weights[i] = weights[i].v
		print_ln("%s", weights[i].reveal())

	send_weights_to_clients(client_sockets, MAX_NUM_CLIENTS, new_weights)
	end = time.time()

main()
